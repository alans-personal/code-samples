Description: Python Stack for Gardener Service

# Parameters:

Resources:

  # Farm state database.
  FarmStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FarmState
      AttributeDefinitions:
      - AttributeName: farmName
        AttributeType: S
      - AttributeName: serviceName
        AttributeType: S
      KeySchema:
      - AttributeName: farmName
        KeyType: HASH
      - AttributeName: serviceName
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 1
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  # Keep a status of a service in each region.
  FarmStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FarmStatus
      AttributeDefinitions:
      - AttributeName: farmName
        AttributeType: S
      - AttributeName: serviceName
        AttributeType: S
      KeySchema:
      - AttributeName: farmName
        KeyType: HASH
      - AttributeName: serviceName
        KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 4
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

# ToDo: Add AutoScaling to this table.
  # Keep a status of a service in each region.
  FarmServiceStatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FarmServiceStatus
      AttributeDefinitions:
      - AttributeName: farmName
        AttributeType: S
      - AttributeName: serviceName
        AttributeType: S
      KeySchema:
      - AttributeName: farmName
        KeyType: HASH
      - AttributeName: serviceName
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: ByService
        KeySchema:
        - AttributeName: serviceName
          KeyType: HASH
        - AttributeName: farmName
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
# Send stream to a lambda function which can detect changes in notify services of issues.
#      StreamSpecification:
#        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  # Service deployment history database.
  FarmServiceHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FarmServiceHistory
      AttributeDefinitions:
      - AttributeName: eventName
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: S
      KeySchema:
      - AttributeName: eventName
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 1
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  # ServiceBuildNumber
  FarmBuildVersionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FarmBuildVersion
      AttributeDefinitions:
      - AttributeName: serviceName
        AttributeType: S
      - AttributeName: buildNumber
        AttributeType: S
      KeySchema:
      - AttributeName: serviceName
        KeyType: HASH
      - AttributeName: buildNumber
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  GardenerLambdaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location:
          Ref: GardenerPipelineBucket
        Type: S3
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      Stages:
        - Name: CheckS3Bucket
          Actions:
          - Name: CheckS3Bucket
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: '1'
              Provider: S3
            OutputArtifacts:
              - Name: RawCode
            Configuration:
              S3Bucket: !Ref PipelineSourceCodeBucket
              S3ObjectKey: gardener-lambda-bare-repo-files.zip
            RunOrder: 1
        - Name: BuildCode
          Actions:
          - Name: PyGardenerCodeBuild
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref GardenerLambdaCodeBuild
            InputArtifacts:
              - Name: RawCode
            OutputArtifacts:
              - Name: LambdaZip
        - Name: DeployDevLambda
          Actions:
          - Name: UpdateDevLambdaAction
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            InputArtifacts:
              - Name: LambdaZip
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: UpdateGardenerDev
              UserParameters: dev
            RunOrder: 1
#        - Name: RunTests
#          Actions:
#          - Name: RunTestsAction
#            ActionTypeId:
#              Category: Invoke
#              Owner: AWS
#              Version: '1'
#              Provider: Lambda
#            InputArtifacts:
#              - Name: LambdaZip
#            OutputArtifacts: []
#            Configuration:
#              FunctionName:
#                Ref: TestStageLambda
#            RunOrder: 1
#        - Name: PylintCheck
#          Actions:
#          - Name: PylintCheckCodeBuildVersion
#            ActionTypeId:
#              Category: Build
#              Owner: AWS
#              Version: '1'
#              Provider: CodeBuild
#            Configuration:
#              ProjectName: !Ref PylintCodeBuild
#            InputArtifacts:
#              - Name: RawCode
#            OutputArtifacts:
#              - Name: PylintResult
        - Name: ManualApproval
          Actions:
          - InputArtifacts: []
            Name: ApproveForProd
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: '1'
              Provider: Manual
            OutputArtifacts: []
            Configuration:
              NotificationArn: !Ref SNSTopicManualApproval
              CustomData: Approve to deploy the Gardener release to production.
            RunOrder: 1
        - Name: DeployProdLambda
          Actions:
          - Name: UpdateProdLambdaAction
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            InputArtifacts:
              - Name: LambdaZip
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: UpdateGardenerProd
              UserParameters: prod
            RunOrder: 1


  GardenerPipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "gardener-code-pipeline-artifacts"
      LifecycleConfiguration:
        Rules:
        - Id: DeleteObjectsAfter60DaysRule
          Status: Enabled
          ExpirationInDays: '60'
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  PipelineSourceCodeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "gardener-pipeline-source"
      VersioningConfiguration:
        Status: Enabled
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  GardenerLambdaCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: gardener-lambda-build
      Description: Build python Gardener with dependencies
      Source:
        Type: CODEPIPELINE
        BuildSpec: py_src/buildspec.yml
      TimeoutInMinutes: 60
      ServiceRole: !GetAtt GardenerCodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: python:2.7.16
        Type: LINUX_CONTAINER
      Artifacts:
        Type: CODEPIPELINE

  SNSTopicManualApproval:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: "asnyder@roku.com"
        Protocol: email
      - Endpoint: "asnyder@roku.com"
        Protocol: email

  # This role is for CodePipeline updates to lambda functions.
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - codepipeline.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - lambda:*
            - s3:*
            - dynamodb:*
            - codepipeline:*
            - codebuild:*
            - sns:Publish
            - ses:SendRawEmail
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: py-gardener-pipeline-update-code-policy

  # This role is for CodeBuild commands
  # Not we might want to export this for the java gardener stack.
  GardenerCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - arn:aws:logs:us-west-2:123456789012:log-group:/aws/codebuild/*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - arn:aws:s3:::codepipeline-us-west-2-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
          - Effect: Allow
            Resource:
            - arn:aws:s3:::gardener-pipeline-source/gardener-lambda-bare-repo-files.zip
            Action:
            - s3:List*
            - s3:GetObject
            - s3:GetObjectVersion
          - Effect: Allow
            Resource:
            - arn:aws:s3:::gardener-pipeline-source/*
            - arn:aws:s3:::gardener-code-pipeline-artifacts/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:List*
            - s3:CreateBucket
          - Effect: Allow
            Action:
            - ssm:GetParameters
            Resource: arn:aws:ssm:us-west-2:123456789012:parameter/CodeBuild/*
          - Action:
            - cloudformation:*
            - s3:*
            - apigateway:*
            - logs:*
            - iam:*
            - lambda:*
            - ec2:*
            Resource: "*"
            Effect: Allow
        PolicyName: gardener-lambda-code-build-policy

  GardenerDevLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: gardener-api-dev
      Handler: "gardener_lambda_function.lambda_handler"
      Code:
        S3Bucket: !Ref GardenerPipelineBucket
        S3Key: "lambda-initial-zipfiles/py-gardener-lambda.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Description: "Entry point of Gardener service"
      Runtime: "python2.7"
      Timeout: "30"
      Environment:
        Variables:
          gardener_api_url: gardener-dev.farmlab.asnyder.com
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  GardenerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: gardener-api
      Handler: "gardener_lambda_function.lambda_handler"
      Code:
        S3Bucket: !Ref GardenerPipelineBucket
        S3Key: "lambda-initial-zipfiles/py-gardener-lambda.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Description: "Entry point of Gardener service"
      Runtime: "python2.7"
      Timeout: "30"
      Environment:
        Variables:
          gardener_api_url: gardener.farmlab.asnyder.com
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team


  # Rule to keep Gardener lambda function active.
  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "GardenerLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "GardenerLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"

  ScheduledRuleDev:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
      -
        Arn:
          Fn::GetAtt:
          - "GardenerDevLambdaFunction"
          - "Arn"
        Id: "TargetFunctionV1"

  PermissionForEventsToInvokeDevLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "GardenerDevLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "ScheduledRuleDev"
        - "Arn"

  ## Lambda function uploads zip file into a different lambda function, and
  ## then is indicates success with a put_job_success_result to aws code-pipeline.
  UpdateGardenerDev:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: gardener-pipeline-deploy-dev
      Code:
        S3Bucket: !Ref GardenerPipelineBucket
        S3Key: "lambda-initial-zipfiles/py-gardener-lambda.zip"
      Handler: gardener-pipeline.lambda_deploy_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '180'
      Environment:
        Variables:
          cf_template_var: gardener-environment
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

# ToDo: Merge the dev and prod deploy lambda functions.
  # This should be the same lambda function as the dev update.
  # Will consolidate as soon a figure out how to pass parameter to lambda
  # function from code-pipeline.   This is just for a proof of concept for the
  # dev to prod approval process. (Will want to insert automatic testing and notification steps.)
  UpdateGardenerProd:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: gardener-pipeline-deploy-prod
      Code:
        S3Bucket: !Ref GardenerPipelineBucket
        S3Key: "lambda-initial-zipfiles/py-gardener-lambda.zip"
      Handler: gardener-pipeline.lambda_deploy_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '180'
      Environment:
        Variables:
          cf_template_var: gardener-environment
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

# Code to keep Gardner lambda functions warm.
  GardenerKeepWarmLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: gardener-lambda-keep-warm
      Handler: "index.handler"
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import datetime
          import json


          def handler(event, context):
              """
              Get an update the build number for a service and write to history table
              :param event:
              :param context:
              :return: build number on success or ERROR: ... on failure
              """

              print('event: {}'.format(event))

              try:
                detail_type = event.get('detail-type')
                source = event.get('source')
                print('Event: {}, source: {}'.format(detail_type, source))

                keep_alive('gardener-api')
                keep_alive('gardener-api-dev')

              except Exception as e:
                print('ERROR: {}'.format(e.message))

              return 'Done'

          def keep_alive(lambda_func_name, aws_region='us-east-1'):
            """
            Call invoke on a specific lambda function. Record errors.
            :param lambda_func_name:
            :param aws_region:
            :return: None
            """
            try:
              print('invoke: {}'.format(lambda_func_name))

              lambda_client = boto3.client('lambda')

              keep_warm_event = {
                'detail-type': 'Scheduled Event',
                'source': 'gardener-lambda-keep-warm'
              }

              lambda_client.invoke(
                FunctionName=lambda_func_name,
                InvocationType='Event',
                Payload=json.dumps(keep_warm_event),
              )

            except Exception as e:
              print('ERROR: function: {}, message: {}'.format(lambda_func_name, e.message))


      Role: !GetAtt GardenerKeepWarmExecutionRole.Arn
      Description: "Keep other lambda functions warm"
      Runtime: "python2.7"
      Timeout: "30"
      Tags:
      - Key: Department
        Value: CTI
      - Key: Stack
        Value: DYNAMODB
      - Key: Spend_Category
        Value: Farms
      - Key: Owner
        Value: CTI-Team

  GardenerKeepWarmExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - lambda:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: gardener-lambda-keep-warm-policy

  GardenerKeepWarmRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "GardenerKeepWarmLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeGardenerKeepWarmLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "GardenerKeepWarmLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "GardenerKeepWarmRule"
        - "Arn"


Outputs:
  S3DeploymentZipFileBucketName:
    Value: !Ref GardenerPipelineBucket
    Description: Name of S3 bucket which as lambda code zip files
    Export:
      Name: !Sub gardener-GardenerPipelineBucket