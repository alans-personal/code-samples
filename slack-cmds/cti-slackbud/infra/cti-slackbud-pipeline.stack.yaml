Description: Stack to update the SlackBud Code. This dependend of the slack-bud and serverless stacks being present.

Resources:

  SlackBudCodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      ArtifactStore:
        Location:
          Ref: PipelineBucket
        Type: S3
      RoleArn: !GetAtt LambdaExecutionRole.Arn
      Stages:
        - Name: CheckS3Bucket
          Actions:
          - Name: CheckS3Bucket
            ActionTypeId:
              Category: Source
              Owner: AWS
              Version: '1'
              Provider: S3
            OutputArtifacts:
              - Name: RawCode
            Configuration:
              S3Bucket: !Ref PipelineSourceCodeBucket
              S3ObjectKey: slack-bud-bare-repo-files.zip
            RunOrder: 1
        - Name: BuildCode
          Actions:
          - Name: UseAwsCodeBuild
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref SlackBudCodeBuild
            InputArtifacts:
              - Name: RawCode
            OutputArtifacts:
              - Name: LambdaZip
        - Name: DeployDevLambda
          Actions:
          - Name: UpdateDevLambdaAction
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            InputArtifacts:
              - Name: LambdaZip
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: UpdateSlackBudDev
              UserParameters: dev
            RunOrder: 1
        - Name: RunTests
          Actions:
          - Name: RunTestsAction
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            InputArtifacts:
              - Name: LambdaZip
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: TestStageLambda
            RunOrder: 1
        - Name: PylintCheck
          Actions:
          - Name: PylintCheckCodeBuildVersion
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: '1'
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref PylintCodeBuild
            InputArtifacts:
              - Name: RawCode
            OutputArtifacts:
              - Name: PylintResult
#        - Name: SendResults
#          Actions:
#          - Name: EmailTestResultsAction
#            ActionTypeId:
#              Category: Invoke
#              Owner: AWS
#              Version: '1'
#              Provider: Lambda
#            InputArtifacts:
#              - Name: PylintResult
#            OutputArtifacts: []
#            Configuration:
#              FunctionName:
#                Ref: EMailTestResultsLambda
#            RunOrder: 1
        - Name: ManualApproval
          Actions:
          - InputArtifacts: []
            Name: ApproveForProd
            ActionTypeId:
              Category: Approval
              Owner: AWS
              Version: '1'
              Provider: Manual
            OutputArtifacts: []
            Configuration:
              NotificationArn: !Ref SNSTopicManualApproval
              CustomData: Approve to deploy the SlackBud release to production.
            RunOrder: 1
        - Name: DeployProdLambda
          Actions:
          - Name: UpdateProdLambdaAction
            ActionTypeId:
              Category: Invoke
              Owner: AWS
              Version: '1'
              Provider: Lambda
            InputArtifacts:
              - Name: LambdaZip
            OutputArtifacts: []
            Configuration:
              FunctionName:
                Ref: UpdateSlackBudProd
              UserParameters: prod
            RunOrder: 1


  PipelineBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "cti-slackbud-pipeline-artifacts"
      LifecycleConfiguration:
        Rules:
        - Id: DeleteObjectsAfter60DaysRule
          Status: Enabled
          ExpirationInDays: '60'
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  PipelineSourceCodeBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "cti-pipeline-source"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  SNSTopicManualApproval:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: "asnyder@roku.com"
        Protocol: email
      - Endpoint: "asnyder@roku.com"
        Protocol: email

## Lambda function uploads zip file into a different lambda function, and
## then is indicates success with a put_job_success_result to aws code-pipeline.
  UpdateSlackBudDev:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: pipeline-deploy-dev
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Handler: cti-pipeline.lambda_deploy_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '180'
      Environment:
        Variables:
          cf_template_var: serverless-slackbud-dev-slackBud
          deply_stage: dev
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: dev
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  # This should be the same lambda function as the dev update.
  # Will consolidate as soon a figure out how to pass parameter to lambda
  # function from code-pipeline.   This is just for a proof of concept for the
  # dev to prod approval process. (Will want to insert automatic testing and notification steps.)
  UpdateSlackBudProd:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: pipeline-deploy-prod
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Handler: cti-pipeline.lambda_deploy_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '180'
      Environment:
        Variables:
          cf_template_var: serverless-slackbud-prod-slackBud
          deply_stage: prod
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  TestStageLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: pipeline-run-tests
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Handler: cti-pipeline.lambda_smoke_and_unit_test_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: '180'
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: dev
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

#  EMailTestResultsLambda:
#    Type: "AWS::Lambda::Function"
#    Properties:
#      FunctionName: pipeline-send-test-results
#      Code:
#        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
#        S3Key: "slack-bud-output/slack-bud-lambda.zip"
#      Handler: cti-pipeline.lambda_send_email_handler
#      Role: !GetAtt LambdaExecutionRole.Arn
#      Runtime: python2.7
#      Timeout: '60'

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - codepipeline.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - lambda:*
            - s3:*
            - codepipeline:*
            - codebuild:*
            - sns:Publish
            - ses:SendRawEmail
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: pipeline-update-code-policy

  SlackBudCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: slack-bud-lambda-build
      Description: Build python with dependencies
      Source:
        Type: CODEPIPELINE
        BuildSpec: slack_bud/buildspec.yml
      TimeoutInMinutes: 60
      ServiceRole: !GetAtt SlackBudCodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: python:2.7.15
        Type: LINUX_CONTAINER
      Artifacts:
        Type: CODEPIPELINE

  PylintCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: pylint-check-build
      Description: Run Pylint check from CodeBuild
      Source:
        Type: S3
        Location: arn:aws:s3:::cti-pipeline-source/slack-bud-bare-repo-files.zip
        BuildSpec: slack_bud/buildspec-pylint.yml
      TimeoutInMinutes: 20
      ServiceRole: !GetAtt SlackBudCodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: python:2.7.15
        Type: LINUX_CONTAINER
      Artifacts:
        Type: NO_ARTIFACTS

  ServerlessDeployCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: serverlesss-deploy-build
      Description: Deploy Serverlesss Framework
      Source:
        Type: S3
        Location: arn:aws:s3:::cti-pipeline-source/slack-bud-bare-repo-files.zip
        BuildSpec: slack_bud/buildspec-serverless.yml
      TimeoutInMinutes: 60
      ServiceRole: !GetAtt SlackBudCodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
        Type: LINUX_CONTAINER
      Artifacts:
        Type: NO_ARTIFACTS

  SlackBudCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - arn:aws:logs:us-west-2:141602222194:log-group:/aws/codebuild/*
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          - Effect: Allow
            Resource:
            - arn:aws:s3:::codepipeline-us-west-2-*
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
          - Effect: Allow
            Resource:
            - arn:aws:s3:::cti-pipeline-source/slack-bud-bare-repo-files.zip
            Action:
            - s3:List*
            - s3:GetObject
            - s3:GetObjectVersion
          - Effect: Allow
            Resource:
            - arn:aws:s3:::cti-pipeline-source/*
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            - s3:List*
            - s3:CreateBucket
          - Effect: Allow
            Action:
            - ssm:GetParameters
            Resource: arn:aws:ssm:us-west-2:141602222194:parameter/CodeBuild/*
          - Action:
            - cloudformation:*
            - s3:*
            - apigateway:*
            - logs:*
            - iam:*
            - lambda:*
            - ec2:*
            - ecr:*
            Resource: "*"
            Effect: Allow
        PolicyName: slack-bud-code-build-policy

  #keep alive events for the long task lambda functions.
  # Rule to keep LongTask lambda function active.
  LongSlackTasksLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: slackbud-longtasks
      Handler: "lambda_longtasks.lambda_handler"
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Role:
        Fn::GetAtt:
          - "SlackBudLambdaRole"
          - "Arn"
      Runtime: "python2.7"
      Timeout: "300"
      MemorySize: 512
      Environment:
        Variables:
          slackToken: bTSapM8aTH8fSgsKdrWG7aB4
      VpcConfig:
        SubnetIds:
          - subnet-1124b33c
        SecurityGroupIds:
          - Ref: CtiProdSlackBudSecurityGroup
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  LongSlackTasksLambdaDev:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: slackbud-longtasks-dev
      Handler: "lambda_longtasks.lambda_handler"
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Role:
        Fn::GetAtt:
          - "SlackBudLambdaRole"
          - "Arn"
      Runtime: "python2.7"
      Timeout: "300"
      MemorySize: 512
      Environment:
        Variables:
          slackToken: bTSapM8aTH8fSgsKdrWG7aB4
      VpcConfig:
        SubnetIds:
          - subnet-1124b33c
        SecurityGroupIds:
          - Ref: CtiProdSlackBudSecurityGroup
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: dev
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  CtiProdSlackBudSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: vpc-41366f26
      GroupDescription: CtiProd SlackBud SecurityGroup
      SecurityGroupEgress:
      -
        IpProtocol: -1
        CidrIp: "10.211.0.0/16"
      -
        IpProtocol: -1
        CidrIp: "10.0.0.0/8"
      -
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"
      -
        IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        CidrIp: "34.193.75.186/32"
      -
        IpProtocol: "tcp"
        FromPort: 443
        ToPort: 443
        CidrIp: "34.194.187.3/32"

  CtiProdSlackBudEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId:
        Fn::GetAtt:
        - CtiProdSlackBudSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - CtiProdSlackBudSecurityGroup
        - GroupId

  CtiProdSlackBudIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Fn::GetAtt:
        - CtiProdSlackBudSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - CtiProdSlackBudSecurityGroup
        - GroupId

  SlackBudLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            AWS:
            - arn:aws:iam::141602222194:root
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ssm:*
            Effect: Allow
            Resource: '*'
          - Action:
            - dynamodb:Describe*
            - dynamodb:List*
            - dynamodb:Update*
            - dynamodb:Get*
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamodb:Scan
            Effect: Allow
            Resource: '*'
          - Action:
            - es:*
            Effect: Allow
            Resource: 'arn:aws:es:us-west-2:141602222194:*'
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - route53:Change*
            - route53:Create*
            - route53:DeleteTraffic*
            - route53:DeleteHealthCheck
            - route53:Get*
            - route53:List*
            - route53:Test*
            - route53:Update*
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::cti-pipeline-source'
              - 'arn:aws:s3:::cti-pipeline-source/*'
              - 'arn:aws:s3:::cti-image-server-bucket'
              - 'arn:aws:s3:::cti-image-server-bucket/*'
          Version: '2012-10-17'
        PolicyName: slack-bud-lambda-policy



# specific to SR-SlackBud
#  DeployConfigTable:
#    Type: "AWS::DynamoDB::Table"
#    Properties:
#      TableName: DeployConfig
#      AttributeDefinitions:
#      - AttributeName: serviceName
#        AttributeType: S
#      KeySchema:
#      - AttributeName: serviceName
#        KeyType: HASH
#      ProvisionedThroughput:
#        ReadCapacityUnits: 1
#        WriteCapacityUnits: 1

  SlackBudEusersTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SlackBudUsers
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  SlackBudCmdTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SlackBudCmds
      AttributeDefinitions:
      - AttributeName: userid
        AttributeType: S
      - AttributeName: timestamp
        AttributeType: S
      KeySchema:
      - AttributeName: userid
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

# specific to SR-SlackBud
#  ServiceInfoTable:
#    Type: "AWS::DynamoDB::Table"
#    Properties:
#      TableName: ServiceInfo
#      AttributeDefinitions:
#      - AttributeName: serviceName
#        AttributeType: S
#      KeySchema:
#      - AttributeName: serviceName
#        KeyType: HASH
#      ProvisionedThroughput:
#        ReadCapacityUnits: 1
#        WriteCapacityUnits: 1
#  # TODO: Add automatic backup when avail in CF templates

  SlackBudSessionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: SlackBudSession
      AttributeDefinitions:
      - AttributeName: slackBudSessionId
        AttributeType: S
      KeySchema:
      - AttributeName: slackBudSessionId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  RepoInfoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: RepoInfo
      AttributeDefinitions:
      - AttributeName: repo
        AttributeType: S
      KeySchema:
      - AttributeName: repo
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com
  # TODO: Add automatic backup when avail in CF templates

# TODO:  Scaled back to what is in git-diff lambda
  SlackBudLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            AWS:
            - arn:aws:iam::141602222194:root
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:*
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - tag:*
            Effect: Allow
            Resource: '*'
          - Action:
            - dynamodb:Describe*
            - dynamodb:List*
            - dynamodb:Update*
            - dynamodb:Get*
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamadb:Scan
            Effect: Allow
            Resource: '*'
          - Action:
            - es:*
            Effect: Allow
            Resource: 'arn:aws:es:us-west-2:141602222194:*'
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - route53:Change*
            - route53:Create*
            - route53:DeleteTraffic*
            - route53:DeleteHealthCheck
            - route53:Get*
            - route53:List*
            - route53:Test*
            - route53:Update*
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - 'arn:aws:s3:::cti-lambda-function-zipfiles'
              - 'arn:aws:s3:::cti-lambda-function-zipfiles/*'
          Version: '2012-10-17'
        PolicyName: slack-bud-lambda-policy


# Keep lambda functions warm sections.
  KeepWarmLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: lambda-keep-warm
      Handler: "index.handler"
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          import boto3
          import datetime
          import json


          def handler(event, context):
              """
              Get an update the build number for a service and write to history table
              :param event:
              :param context:
              :return: build number on success or ERROR: ... on failure
              """

              print('event: {}'.format(event))

              try:
                detail_type = event.get('detail-type')
                source = event.get('source')
                print('Event: {}, source: {}'.format(detail_type, source))

                keep_alive('serverless-slackbud-dev-slackBud')
                keep_alive('serverless-slackbud-prod-slackBud')
                keep_alive('slackbud-longtasks')
                keep_alive('slackbud-longtasks-dev')

              except Exception as e:
                print('ERROR: {}'.format(e.message))

              return 'Done'

          def keep_alive(lambda_func_name, aws_region='us-east-1'):
            """
            Call invoke on a specific lambda function. Record errors.
            :param lambda_func_name:
            :param aws_region:
            :return: None
            """
            try:
              print('invoke: {}'.format(lambda_func_name))

              lambda_client = boto3.client('lambda')

              keep_warm_event = {
                'detail-type': 'Scheduled Event',
                'source': 'lambda-keep-warm'
              }

              lambda_client.invoke(
                FunctionName=lambda_func_name,
                InvocationType='Event',
                Payload=json.dumps(keep_warm_event),
              )

            except Exception as e:
              print('ERROR: function: {}, message: {}'.format(lambda_func_name, e.message))


      Role: !GetAtt KeepWarmExecutionRole.Arn
      Description: "Keep other lambda functions warm"
      Runtime: "python2.7"
      Timeout: "30"
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  KeepWarmExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - lambda:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: lambda-keep-warm-policy

  KeepWarmRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(2 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "KeepWarmLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeKeepWarmLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "KeepWarmLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "KeepWarmRule"
        - "Arn"

# JWT Refresh Lambda here.
  JwtRefreshLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: jwt-refresh-lambda
      Handler: "lambda_jwt_refresh.handler"
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Role: !GetAtt JwtRefreshExecutionRole.Arn
      Description: "Refresh JWT token in Parameter Store used by Slack and other services"
      Runtime: "python2.7"
      Timeout: "120"
      VpcConfig:
        SubnetIds:
        - subnet-1124b33c
        SecurityGroupIds:
        - Ref: CtiProdSlackBudSecurityGroup
      Tags:
        - Key: Spend_Category
          Value: CTI-Slack
        - Key: roku:cost:service_name
          Value: CTI-Slack
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  JwtRefreshExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            AWS: 'arn:aws:iam::141602222194:role/cti_common_aws_iam_role'
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            - iam:GetRole
            - iam:PassRole
            Effect: Allow
            Resource: '*'
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
            - lambda:*
            - ssm:*
            Effect: Allow
            Resource: '*'
          - Action:
            - iam:GenerateCredentialReport
            - iam:GenerateServiceLastAccessedDetails
            - iam:Get*
            - iam:List*
            Effect: Allow
            Resource: '*'
          - Action:
            - elasticfilesystem:*
            - s3:*
            - logs:*
            - sts:*
            - dynamodb:*
            - elasticloadbalancing:*
            - iam:*
            - route53domains:*
            - cloudwatch:*
            - kms:*
            - lambda:*
            - ecs:*
            - route53:*
            - ec2:*
            - ecr:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: jwt-refresh-policy

# ToDo: consider increase to a few days. The token lasts one week.
  JwtRefreshCronRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(12 hours)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "JwtRefreshLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeJwtRefreshLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "JwtRefreshLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "JwtRefreshCronRule"
        - "Arn"

  # This sections adds a Lambda function to do OneLogin Scans with a CRON based scheduler.
  OneLoginScanLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: onelogin-scans-lambda
      Handler: "lambda_onelogin_daily_scans.handler"
      Code:
        S3Bucket: !ImportValue cti-slackBud-S3DeploymentZipFileBucketName
        S3Key: "slack-bud-output/slack-bud-lambda.zip"
      Role: !GetAtt SlackBudLambdaRole.Arn
      Description: "Do scans of CloudFormation stacks and CloudTrail logs for OneLogin reports"
      Runtime: "python2.7"
      Timeout: "900"
      VpcConfig:
        SubnetIds:
        - subnet-1124b33c
        SecurityGroupIds:
        - Ref: CtiProdSlackBudSecurityGroup
      Tags:
        - Key: Spend_Category
          Value: OneLoginSSO
        - Key: roku:cost:service_name
          Value: OneLoginSSO
        - Key: roku:cost:env
          Value: prod
        - Key: roku:cost:business_unit
          Value: coredevops
        - Key: roku:owner
          Value: asnyder@roku.com

  OneLoginScanCronRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(12 hours)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "OneLoginScanLambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeOneLoginScanLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "OneLoginScanLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "OneLoginScanCronRule"
        - "Arn"
